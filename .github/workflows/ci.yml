name: Python code quality, tests and docker deploy

on:
  push:
    branches:
      - main
      - dev
  pull_request:

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

env:
  DEFAULT_PYTHON: "3.11"
  PROJECT_PATH: "bumper"

jobs:
  code-quality:
    name: Check code quality
    runs-on: ubuntu-latest

    steps:
      # https://github.com/actions/checkout
      - name: Checkout repository
        uses: "actions/checkout@v4"

      # https://github.com/actions/setup-python
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
          cache-dependency-path: "requirements*"
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      # Following steps cannot run by pre-commit.ci as repo = local
      - name: Run mypy
        run: mypy ${{ env.PROJECT_PATH }}/
      - name: Pylint review
        run: pylint ${{ env.PROJECT_PATH }}/

  tests:
    runs-on: ubuntu-latest
    name: Run tests
    steps:
      # https://github.com/actions/checkout
      - name: Checkout repository
        uses: "actions/checkout@v4"

      # https://github.com/actions/setup-python
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
          cache-dependency-path: "requirements*"
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Run pytest
        run: pytest --cov=./ --cov-report=xml

      # https://github.com/codecov/codecov-action
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  build:
    name: Push Docker image to GitHub ghcr
    runs-on: ubuntu-latest

    steps:
      # https://github.com/actions/checkout
      - uses: actions/checkout@v4

      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=develop
          flavor: |
            latest=auto

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # https://github.com/docker/login-action
      - name: Login to registry ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/docker/build-push-action
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
